const Kafka = require('node-rdkafka')
const faker = require('faker')
const qr = require('qrcode')
const { Storage } = require('@google-cloud/storage');
const fs = require('fs');
const arrivalDelays = { /* Each District has a different delivery time (in ms, multiply by 1000)  */
    Dan: 4,
    Central: 5,
    Haifa: 6,
    Southern: 7
}
const storage = new Storage({   /* Connecting to Firebase Storage using the JSON key file */
    keyFilename: 'bigdata-6c44f-firebase-adminsdk-sgery-cabb327f0e.json',
});


const stream = Kafka.Producer.createWriteStream({   /* Shipments are being sent by a Kafka producer */
    'metadata.broker.list': 'localhost:9092'
}, {}, {
    topic: 'packages',  //"packages" as a topic of Kafka messages
});

stream.on('error', (err) => {
    console.error('Error in kafka stream');
    console.error(err);
});

function queueRandomPackage() { /* This function generates a random package information */
    const id = getRandomTrackingId()    
    const cart = getRandomItems()       
    const size = getRandomSize(cart)
    const tax = getRandomTax(cart)
    const city = getRandomCity()        
    const address = getRandomAddress(city[1])
    const event = {
        TrackID: id,
        Items: cart,
        Size: size,
        Tax: tax,
        Address: address,
        District: city[0]
    }
    const success = stream.write(Buffer.from(JSON.stringify(event)))
    if (success) {
        generateQR(event)
        setTimeout(() => {uploadFile(event.TrackID)}, arrivalDelays[event.District] * 1000)
        

        console.log(JSON.stringify(event))
    } else {
        console.log('Too many messages in the queue already..');
    }
}

/* Tracking Number in the form: [A-Z]^2 * [0-9]^8 (regex) */
function getRandomTrackingId() {    
    const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
    var number = 0
    for (var i = 0; i < 8; i++) {
        number += Math.floor(Math.random() * Math.pow(10, 8 - i))
    }
    return (letters[Math.floor(Math.random() * letters.length)] + letters[Math.floor(Math.random() * letters.length)] + number)
}

/* Items generated using faker API (for more information about faker: https://fakercloud.com/api) */
function getRandomItems() { 
    var amount = Math.floor(Math.random() * 3) + 1
    var cart = []
    for (var i = 0; i < amount; i++) {
        cart[i] = {
            name: faker.commerce.productName(),
            amount: Math.floor(Math.random() * 3 + 1),
            price: parseFloat(faker.commerce.price(1, 150))
        }
    }
    return cart
}

/* Size is generated by the given amount of items generated (considering each item's amount) */
function getRandomSize(cart) { //  1 = small, 2 = medium, 3 = big
    var size = 0;
    for (var i in cart) {
        size += cart[i].amount
    }
    if (size < 3) return '1'
    else if (size < 7) return '2'
    else return '3'
}

/* Tax is calculated by summing the prices of the package's items to a total */
function getRandomTax(cart) {   // total<75 : no Tax(0), 75<total<500
    var totPrice = 0
    for (var i in cart) {
        totPrice += (cart[i].price * cart[i].amount)
    }
    if (totPrice < 75) return '0'
    else if (totPrice < 500) return '1'
    else return '2'
}
//  < street addr. , city >
function getRandomAddress(city) {
    return faker.address.streetAddress(false) + `,${city}`
}

/* District is randomly selected, and then a relevant City is selected of the District */
function getRandomCity() {
    districts = {
        Haifa: ['Haifa', 'Yagur', 'Nesher', 'Nahariya', 'Zefat', 'Tveria'],
        Dan: ['Tel Aviv-Yafo', 'Herzeliya', 'Natanya', 'Ramat Gan', 'Bnei Barak', 'Raanana'],
        Central: ['Jerusalem', 'Rosh HaAiyn', 'Ariel', 'Kfar Sava',],
        Southern: ['Eilat', 'Beer Sheva', 'Dimona', 'Mitzpe Ramon', 'Lehavim']
    }
    var district = Object.keys(districts)[Math.floor(Math.random() * Object.keys(districts).length)]
    var city = districts[district][Math.floor(Math.random() * districts[district].length)]

    return ([district, city])
}

/* using qrcode API. for more information: https://www.npmjs.com/package/qrcode */
const generateQR = async post => {
    try {
        await qr.toFile(__dirname + `/images/Staging/${post.TrackID}.png`, JSON.stringify(post),{width:400,color:{dark: '#000000', light:'#f8f9f5'}})
    } catch (err) { throw err }
}

/* Generating and send random packages as a JSON via Kafka write stream */
setInterval(() => {
    queueRandomPackage();
}, 3000);

/* Uploading the generated QR to Firebase Storage */
const uploadFile = async (tid) => {
    let bucketName = 'gs://bigdata-6c44f.appspot.com'
    let fileName = __dirname +`/images/Staging/${tid}.png`
    await storage.bucket(bucketName).upload(fileName, {
        gzip: true,
        destination: tid + '.png',
        metadata: {
            cacheControl: 'public, max-age=31536000',
        },
    })
    try {
        fs.rmSync(__dirname + `/images/Staging/${tid}.png`)
    } catch (error) {
        console.error(error)
    }
};